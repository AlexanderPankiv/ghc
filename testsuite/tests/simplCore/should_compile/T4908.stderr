
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 64, types: 41, coercions: 0}

T4908.$trModule2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
T4908.$trModule2 = GHC.Types.TrNameS "main"#

T4908.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T4908.$trModule1 = GHC.Types.TrNameS "T4908"#

T4908.$trModule :: Module
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
T4908.$trModule =
  GHC.Types.Module T4908.$trModule2 T4908.$trModule1

Rec {
T4908.f_$s$wf [Occ=LoopBreaker] :: Int# -> Int -> Int# -> Bool
[GblId, Arity=3, Caf=NoCafRefs, Str=DmdType <S,1*U><L,A><L,U>]
T4908.f_$s$wf =
  \ (sc :: Int#) (sc1 :: Int) (sc2 :: Int#) ->
    case sc of ds {
      __DEFAULT ->
        case sc2 of ds1 {
          __DEFAULT -> T4908.f_$s$wf (-# ds 1#) sc1 ds1;
          0# -> GHC.Types.True
        };
      0# -> GHC.Types.True
    }
end Rec }

T4908.$wf [InlPrag=[0]] :: Int# -> (Int, Int) -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S,1*U><L,1*U(A,U(U))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 20] 101 20}]
T4908.$wf =
  \ (ww :: Int#) (w :: (Int, Int)) ->
    case ww of ds {
      __DEFAULT ->
        case w of _ [Occ=Dead] { (a, b) ->
        case b of _ [Occ=Dead] { I# ds1 ->
        case ds1 of ds2 {
          __DEFAULT -> T4908.f_$s$wf (-# ds 1#) a ds2;
          0# -> GHC.Types.True
        }
        }
        };
      0# -> GHC.Types.True
    }

f [InlPrag=INLINE[0]] :: Int -> (Int, Int) -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(1*U)><L,1*U(A,U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w [Occ=Once!] :: Int) (w1 [Occ=Once] :: (Int, Int)) ->
                 case w of _ [Occ=Dead] { I# ww1 [Occ=Once] -> T4908.$wf ww1 w1 }}]
f =
  \ (w :: Int) (w1 :: (Int, Int)) ->
    case w of _ [Occ=Dead] { I# ww1 -> T4908.$wf ww1 w1 }


------ Local rules for imported ids --------
"SC:$wf0" [0]
    forall (sc :: Int#) (sc1 :: Int) (sc2 :: Int#).
      T4908.$wf sc (sc1, GHC.Types.I# sc2)
      = T4908.f_$s$wf sc sc1 sc2


