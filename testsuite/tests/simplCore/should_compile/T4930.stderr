
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 33, types: 14, coercions: 0}

T4930.$trModule2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
T4930.$trModule2 = GHC.Types.TrNameS "main"#

T4930.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 20}]
T4930.$trModule1 = GHC.Types.TrNameS "T4930"#

T4930.$trModule :: GHC.Types.Module
[GblId[ReflectionId],
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
T4930.$trModule =
  GHC.Types.Module T4930.$trModule2 T4930.$trModule1

lvl :: [Char]
[GblId, Str=DmdType]
lvl = GHC.CString.unpackCString# "Too small"#

T4930.foo1 :: Int
[GblId, Str=DmdType b]
T4930.foo1 = error @ Int lvl

foo :: Int -> Int
[GblId,
 Arity=1,
 Str=DmdType <S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n [Occ=Once!] :: Int) ->
                 case n of _ [Occ=Dead] { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x 5#)
                 of _ [Occ=Dead] {
                   False -> GHC.Types.I# (GHC.Prim.+# x 5#);
                   True -> T4930.foo1
                 }
                 }}]
foo =
  \ (n :: Int) ->
    case n of _ [Occ=Dead] { GHC.Types.I# x ->
    case GHC.Prim.tagToEnum# @ Bool (GHC.Prim.<# x 5#)
    of _ [Occ=Dead] {
      False -> GHC.Types.I# (GHC.Prim.+# x 5#);
      True -> T4930.foo1
    }
    }



